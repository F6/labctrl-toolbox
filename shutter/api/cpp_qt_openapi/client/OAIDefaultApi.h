/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHTTPValidationError.h"
#include "OAIServerStatusReport.h"
#include "OAIShutterChannelList.h"
#include "OAIShutterChannelOperation.h"
#include "OAIShutterStateReport.h"
#include "OAIToken.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    void getServerStatusStatusGet();


    void getShutterListGet();

    /**
    * @param[in]  shutter_name QString [required]
    */
    void getShutterStateShutterNameGet(const QString &shutter_name);

    /**
    * @param[in]  username QString [required]
    * @param[in]  password QString [required]
    * @param[in]  grant_type QString [optional]
    * @param[in]  scope QString [optional]
    * @param[in]  client_id QString [optional]
    * @param[in]  client_secret QString [optional]
    */
    void loginForAccessTokenTokenPost(const QString &username, const QString &password, const ::OpenAPI::OptionalParam<QString> &grant_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &client_secret = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  shutter_name QString [required]
    * @param[in]  oai_shutter_channel_operation OAIShutterChannelOperation [required]
    */
    void setShutterStateShutterNamePost(const QString &shutter_name, const OAIShutterChannelOperation &oai_shutter_channel_operation);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getServerStatusStatusGetCallback(OAIHttpRequestWorker *worker);
    void getShutterListGetCallback(OAIHttpRequestWorker *worker);
    void getShutterStateShutterNameGetCallback(OAIHttpRequestWorker *worker);
    void loginForAccessTokenTokenPostCallback(OAIHttpRequestWorker *worker);
    void setShutterStateShutterNamePostCallback(OAIHttpRequestWorker *worker);

signals:

    void getServerStatusStatusGetSignal(OAIServerStatusReport summary);
    void getShutterListGetSignal(OAIShutterChannelList summary);
    void getShutterStateShutterNameGetSignal(OAIShutterStateReport summary);
    void loginForAccessTokenTokenPostSignal(OAIToken summary);
    void setShutterStateShutterNamePostSignal(OAIShutterStateReport summary);

    void getServerStatusStatusGetSignalFull(OAIHttpRequestWorker *worker, OAIServerStatusReport summary);
    void getShutterListGetSignalFull(OAIHttpRequestWorker *worker, OAIShutterChannelList summary);
    void getShutterStateShutterNameGetSignalFull(OAIHttpRequestWorker *worker, OAIShutterStateReport summary);
    void loginForAccessTokenTokenPostSignalFull(OAIHttpRequestWorker *worker, OAIToken summary);
    void setShutterStateShutterNamePostSignalFull(OAIHttpRequestWorker *worker, OAIShutterStateReport summary);

    void getServerStatusStatusGetSignalE(OAIServerStatusReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShutterListGetSignalE(OAIShutterChannelList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getShutterStateShutterNameGetSignalE(OAIShutterStateReport summary, QNetworkReply::NetworkError error_type, QString error_str);
    void loginForAccessTokenTokenPostSignalE(OAIToken summary, QNetworkReply::NetworkError error_type, QString error_str);
    void setShutterStateShutterNamePostSignalE(OAIShutterStateReport summary, QNetworkReply::NetworkError error_type, QString error_str);

    void getServerStatusStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShutterListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getShutterStateShutterNameGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void loginForAccessTokenTokenPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void setShutterStateShutterNamePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public slots:
    void tokenAvailable();
    
};

} // namespace OpenAPI
#endif
